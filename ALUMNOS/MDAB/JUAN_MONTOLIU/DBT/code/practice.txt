------ STAGING AND SOURCES ------

-----------------------------------------------
## Add “orders” and “payment”  in sources.yml.
-----------------------------------------------

version: 2

sources:
 - name: jaffle_shop
   database: dbt
   schema: dev_data
   tables:
     - name: customers
     - name: orders
     - name: payments

----------------------------------------------
## Create “stg_orders.sql” in models/staging.
----------------------------------------------

select
    id as order_id,
    user_id as customer_id,
    order_date,
    status
from 
    {{ source ('jaffle_shop', 'orders') }}

------------------------------------------------
## Create “stg_payments.sql” in models/staging.
-------------------------------------------------

select
    id as payment_id,
    orderid as order_id,
    paymentmethod as payment_method,
    status,
    -- amount is stored in cents, convert it to dollars
    amount / 100 as amount,
    created as created_at
from {{ source ('jaffle_shop', 'paymens') }}


-------- MARTS ------------

-------------------------------------------
## Create “fct_orders.sql” in models/marts
-------------------------------------------

with orders as  (
    select * from {{ ref ('stg_orders' )}}
),

payments as (
    select * from {{ ref ('stg_payments') }}
),

order_payments as (
    select
        order_id,
        sum (case when status = 'success' then amount end) as amount

    from payments
    group by order_id
),

 final as (

    select
        orders.order_id,
        orders.customer_id,
        orders.order_date,
        coalesce (order_payments.amount, 0) as amount

    from orders
    left join order_payments using (order_id)
)

select * from final

-----------------------------------------
## Refactor dim_customers model
-----------------------------------------

with customers as (

     select * from {{ ref('stg_customers') }}

),

orders as ( 

    select * from {{ ref('fct_orders') }}

),

customer_orders as (

    select
        customer_id,
        min(order_date) as first_order_date,
        max(order_date) as most_recent_order_date,
        count(order_id) as number_of_orders,
        sum(amount) as lifetime_value
    from orders

    group by customer_id

),

final as (

    select
        customers.customer_id,
        customers.first_name,
        customers.last_name,
        customer_orders.first_order_date,
        customer_orders.most_recent_order_date,
        coalesce (customer_orders.number_of_orders, 0) as number_of_orders,
        customer_orders.lifetime_value

    from customers
    left join customer_orders using (customer_id)

)

select * from final
